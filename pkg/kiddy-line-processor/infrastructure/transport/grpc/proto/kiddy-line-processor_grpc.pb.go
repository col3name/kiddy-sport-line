// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KiddyLineProcessorClient is the client API for KiddyLineProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiddyLineProcessorClient interface {
	SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (KiddyLineProcessor_SubscribeOnSportsLinesClient, error)
}

type kiddyLineProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewKiddyLineProcessorClient(cc grpc.ClientConnInterface) KiddyLineProcessorClient {
	return &kiddyLineProcessorClient{cc}
}

func (c *kiddyLineProcessorClient) SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (KiddyLineProcessor_SubscribeOnSportsLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiddyLineProcessor_ServiceDesc.Streams[0], "/proto.KiddyLineProcessor/SubscribeOnSportsLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiddyLineProcessorSubscribeOnSportsLinesClient{stream}
	return x, nil
}

type KiddyLineProcessor_SubscribeOnSportsLinesClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type kiddyLineProcessorSubscribeOnSportsLinesClient struct {
	grpc.ClientStream
}

func (x *kiddyLineProcessorSubscribeOnSportsLinesClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kiddyLineProcessorSubscribeOnSportsLinesClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KiddyLineProcessorServer is the server API for KiddyLineProcessor service.
// All implementations must embed UnimplementedKiddyLineProcessorServer
// for forward compatibility
type KiddyLineProcessorServer interface {
	SubscribeOnSportsLines(KiddyLineProcessor_SubscribeOnSportsLinesServer) error
	mustEmbedUnimplementedKiddyLineProcessorServer()
}

// UnimplementedKiddyLineProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedKiddyLineProcessorServer struct {
}

func (UnimplementedKiddyLineProcessorServer) SubscribeOnSportsLines(KiddyLineProcessor_SubscribeOnSportsLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportsLines not implemented")
}
func (UnimplementedKiddyLineProcessorServer) mustEmbedUnimplementedKiddyLineProcessorServer() {}

// UnsafeKiddyLineProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiddyLineProcessorServer will
// result in compilation errors.
type UnsafeKiddyLineProcessorServer interface {
	mustEmbedUnimplementedKiddyLineProcessorServer()
}

func RegisterKiddyLineProcessorServer(s grpc.ServiceRegistrar, srv KiddyLineProcessorServer) {
	s.RegisterService(&KiddyLineProcessor_ServiceDesc, srv)
}

func _KiddyLineProcessor_SubscribeOnSportsLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KiddyLineProcessorServer).SubscribeOnSportsLines(&kiddyLineProcessorSubscribeOnSportsLinesServer{stream})
}

type KiddyLineProcessor_SubscribeOnSportsLinesServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type kiddyLineProcessorSubscribeOnSportsLinesServer struct {
	grpc.ServerStream
}

func (x *kiddyLineProcessorSubscribeOnSportsLinesServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kiddyLineProcessorSubscribeOnSportsLinesServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KiddyLineProcessor_ServiceDesc is the grpc.ServiceDesc for KiddyLineProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiddyLineProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KiddyLineProcessor",
	HandlerType: (*KiddyLineProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportsLines",
			Handler:       _KiddyLineProcessor_SubscribeOnSportsLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/kiddy-line-processor.proto",
}
